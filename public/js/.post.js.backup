// Configure marked with highlight.js
marked.setOptions({
    highlight: function(code, lang) {
        if (lang && hljs.getLanguage(lang)) {
            return hljs.highlight(lang, code).value;
        }
        return hljs.highlightAuto(code).value;
    },
    breaks: true,
    gfm: true
});

async function loadPost() {
    try {
        const postId = window.location.pathname.split('/').pop();
        
        const response = await fetch(`/api/posts/${postId}`);
        if (!response.ok) throw new Error('Post not found');
        
        const post = await response.json();
        
        const postContainer = document.querySelector('.post-container');
        if (!postContainer) {
            console.error('Post container not found!');
            return;
        }
        
        // Parse markdown
        const renderedContent = marked.parse(post.content);
        
        const sanitizedContent = DOMPurify.sanitize(renderedContent);
        
        postContainer.innerHTML = `
            <article class="post">
                <header class="post-header">
                    <h1>${DOMPurify.sanitize(post.title)}</h1>
                    <div class="post-meta">
                        <span class="author">${post.author_name || 'Anonymous'}</span>
                        <span class="date">${new Date(post.created_at).toLocaleDateString()}</span>
                    </div>
                </header>
                <div class="post-content">
                    ${sanitizedContent}
                </div>
            </article>
        `;

        // Initialize syntax highlighting
        document.querySelectorAll('pre code').forEach((block) => {
            hljs.highlightElement(block);
        });
    } catch (error) {
        console.error('Error loading post:', error);
        const postContainer = document.querySelector('.post-container');
        if (postContainer) {
            postContainer.innerHTML = `
                <div class="error">
                    <h2>Error loading post</h2>
                    <p>${error.message}</p>
                </div>
            `;
        }
    }
}

// Initialize navbar toggle
function initializeNavbarToggle() {
    const navbar = document.querySelector('.navbar');
    const toggleButton = document.getElementById('navbar-toggle');
    
    toggleButton.addEventListener('click', () => {
        navbar.classList.toggle('collapsed');
        toggleButton.textContent = navbar.classList.contains('collapsed') ? '▶' : '◀';
        localStorage.setItem('navbarCollapsed', navbar.classList.contains('collapsed'));
    });
    
    const isCollapsed = localStorage.getItem('navbarCollapsed') === 'true';
    if (isCollapsed) {
        navbar.classList.add('collapsed');
        toggleButton.textContent = '▶';
    }
}

// Make sure the function is called after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    loadPost();
    initializeNavbarToggle();
});
