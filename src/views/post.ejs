<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NTee213 | <%= post.title %></title>
    <link rel="stylesheet" href="/css/home.css">
    <link rel="stylesheet" href="/css/post.css">
    <link rel="stylesheet" href="/css/lib/github-markdown-dark.css">
    <link rel="stylesheet" href="/css/lib/github-dark.css">
    <script src="/js/post.js" defer></script>
</head>
<body>
    <div class="container">
        <nav class="navbar">
            <ul>
                <li><a href="/home">Home</a></li>
                <li><a href="#">Settings</a></li>
            </ul>
        </nav>
        <button id="navbar-toggle" class="navbar-toggle">‚â°</button>
        
        <main class="content">
            <header class="header">
                <div class="page-name">NTee213</div>
                <div class="search-container">
                    <form id="search-form" method="GET" action="/home">
                        <input 
                            type="text" 
                            name="search" 
                            placeholder="Search posts..." 
                        >
                        <button type="submit">üîç</button>
                    </form>
                </div>
                <div class="username">
                    <a href="/login"><p class="login-redirect">login</p></a>
                </div>
            </header>
            <div class="post-container markdown-body">
                <article class="post" data-post-id="<%= post.id %>">
                    <header class="post-header">
                        <h1><%= post.title %></h1>
                        <div class="post-meta">
                            <span class="author"><%= post.author_name || 'Anonymous' %></span>
                            <span class="date"><%= new Date(post.created_at).toLocaleDateString() %></span>
                        </div>
                    </header>
                    <div class="post-content">
                        <%- renderedContent %>
                    </div>
                </article>

                <!-- Comments section -->
                <div class="comments-section">
                    <h2>Comments</h2>
                    
                    <!-- Comment creation form - Only to logged in users -->
                    <% if (isLoggedIn) { %>
                        <form id="comment-form" class="comment-form">
                            <textarea id="comment-content" placeholder="Write a comment..." required></textarea>
                            <button type="submit" class="submit-comment">Post Comment</button>
                        </form>
                    <% } %>
                    <div class="comments-list">
                        <!-- Comments will be loaded here -->
                    </div>
                </div>
            </div>
        </main>
    </div>
    
    <script src="/js/lib/highlight.min.js"></script>
    <script src="/js/lib/marked.min.js"></script>
    <script>
        // Add this at the top of your script section
        async function getCsrfToken() {
            const response = await fetch('/csrf-token');
            const { token } = await response.json();
            return token;
        }

        // Initialize highlight.js with specific languages
        hljs.configure({
            languages: ['javascript', 'python', 'bash', 'html', 'css', 'sql', 'sh', 'json', 'yaml', 'markdown', 'toml', 'c', 'cpp', 'java', 'php', 'ruby', 'swift', 'kotlin', 'go', 'rust', 'scala', 'haskell', 'erlang', 'elixir', 'dart', 'typescript'],
            cssSelector: 'pre code'
        });

        document.addEventListener('DOMContentLoaded', () => {
            // Apply highlighting to all code blocks (both posts and comments)
            document.querySelectorAll('pre code').forEach((block) => {
                hljs.highlightElement(block);
            });

            // Navbar toggle logic
            const navbar = document.querySelector('.navbar');
            const toggleButton = document.getElementById('navbar-toggle');
            
            toggleButton.addEventListener('click', () => {
                navbar.classList.toggle('collapsed');
                toggleButton.textContent = '‚â°';
                localStorage.setItem('navbarCollapsed', navbar.classList.contains('collapsed'));
            });
            
            const isCollapsed = localStorage.getItem('navbarCollapsed') === 'true';
            if (isCollapsed) {
                navbar.classList.add('collapsed');
                toggleButton.textContent = '‚â°';
            }

            // Comments functionality
            const commentsList = document.querySelector('.comments-list');
            const postId = document.querySelector('.post').dataset.postId;
            let offset = 0;
            const limit = 5;

            async function loadComments() {
                try {
                    const response = await fetch(`/api/comments/post/${postId}?limit=${limit}&offset=${offset}`);
                    const comments = await response.json();
                    
                    if (comments.length > 0) {
                        commentsList.innerHTML += comments.map(comment => `
                            <div class="comment" data-comment-id="${comment.id}">
                                <div class="comment-header">
                                    <p class="comment-author">${comment.author_name || 'Anonymous'}</p>
                                    <span class="comment-date">${new Date(comment.created_at).toLocaleDateString()}</span>
                                </div>
                                <div class="comment-content">
                                    ${comment.content}
                                </div>
                            </div>
                        `).join('');

                        // Apply syntax highlighting to newly loaded comments
                        document.querySelectorAll('.comment-content pre code').forEach((block) => {
                            hljs.highlightElement(block);
                        });

                        // Add copy buttons to code blocks in comments
                        document.querySelectorAll('.comment-content pre code').forEach((codeBlock) => {
                            const header = document.createElement('div');
                            header.className = 'code-block-header';
        
                            const copyButton = document.createElement('button');
                            copyButton.className = 'copy-button';
                            copyButton.innerHTML = 'üìã Copy';
                            
                            copyButton.addEventListener('click', async () => {
                                try {
                                    await navigator.clipboard.writeText(codeBlock.textContent);
                                    copyButton.innerHTML = '‚úÖ Copied!';
                                    setTimeout(() => {
                                        copyButton.innerHTML = 'üìã Copy';
                                    }, 2000);
                                } catch (err) {
                                    console.error('Failed to copy:', err);
                                    copyButton.innerHTML = '‚ùå Error!';
                                    setTimeout(() => {
                                        copyButton.innerHTML = 'üìã Copy';
                                    }, 2000);
                                }
                            });
        
                            header.appendChild(copyButton);
                            codeBlock.parentElement.insertBefore(header, codeBlock);
                        });

                        if (comments.length === limit) {
                            const readMoreButton = document.createElement('button');
                            readMoreButton.textContent = 'Read more ‚ñº';
                            readMoreButton.classList.add('read-more');
                            readMoreButton.addEventListener('click', () => {
                                offset += limit;
                                loadComments();
                                readMoreButton.remove();
                            });
                            commentsList.appendChild(readMoreButton);
                        }
                    } else if (offset === 0) {
                        commentsList.innerHTML = '<p class="no-comments">No comments yet</p>';
                    }
                } catch (error) {
                    console.error('Error loading comments:', error);
                    commentsList.innerHTML = '<p class="error">Failed to load comments</p>';
                }
            }

            // Load initial comments
            loadComments();

            // Handle comment form submission if form exists (user is logged in)
            const commentForm = document.getElementById('comment-form');
            if (commentForm) {
                commentForm.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const submitBtn = e.target.querySelector('button[type="submit"]');
                    submitBtn.disabled = true;
                    submitBtn.textContent = 'Posting...';

                    try {
                        const content = document.getElementById('comment-content').value;
                        
                        const response = await fetch('/api/comments', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'x-csrf-token': await getCsrfToken()
                            },
                            body: JSON.stringify({
                                post_id: postId,
                                content: content
                            }),
                            credentials: 'include'
                        });

                        if (response.ok) {
                            document.getElementById('comment-content').value = '';
                            commentsList.innerHTML = ''; // Clear comments list
                            offset = 0; // Reset offset
                            loadComments(); // Reload comments
                        } else {
                            const data = await response.json();
                            alert(data.message || 'Failed to post comment');
                        }
                    } catch (error) {
                        console.error('Error posting comment:', error);
                        alert('Failed to post comment');
                    } finally {
                        submitBtn.disabled = false;
                        submitBtn.textContent = 'Post Comment';
                    }
                });
            }

            // Copy button functionality
            document.querySelectorAll('pre code').forEach((codeBlock) => {
                // Create wrapper for the copy button
                const header = document.createElement('div');
                header.className = 'code-block-header';
        
                // Create copy button
                const copyButton = document.createElement('button');
                copyButton.className = 'copy-button';
                copyButton.innerHTML = 'üìã Copy';
                
                // Add click handler
                copyButton.addEventListener('click', async () => {
                    try {
                        await navigator.clipboard.writeText(codeBlock.textContent);
                        copyButton.innerHTML = '‚úÖ Copied!';
                        setTimeout(() => {
                            copyButton.innerHTML = 'üìã Copy';
                        }, 2000);
                    } catch (err) {
                        console.error('Failed to copy:', err);
                        copyButton.innerHTML = '‚ùå Error!';
                        setTimeout(() => {
                            copyButton.innerHTML = 'üìã Copy';
                        }, 2000);
                    }
                });
        
                // Add button to header and header to pre element
                header.appendChild(copyButton);
                codeBlock.parentElement.insertBefore(header, codeBlock);
            });
        });
    </script>
</body>
</html>